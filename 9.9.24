import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt

# Parameters for the Gaussian distribution
mean_population = 10
std_dev_population = 2
confidence_level = 0.95
sample_sizes = [5, 10, 20, 40, 80, 160, 1000]
n_simulations = 1000  # Number of simulations to estimate CI

def calculate_confidence_interval(sample, confidence=0.95):
    mean_sample = np.mean(sample)
    sem = stats.sem(sample)  # Standard Error of the Mean
    df = len(sample) - 1
    t_critical = stats.t.ppf((1 + confidence) / 2, df)
    margin_of_error = t_critical * sem
    return mean_sample - margin_of_error, mean_sample + margin_of_error

# Simulate data and calculate confidence intervals
results = []
for n in sample_sizes:
    ci_lower_list = []
    ci_upper_list = []
    
    for _ in range(n_simulations):
        sample = np.random.normal(mean_population, std_dev_population, n)
        ci_lower, ci_upper = calculate_confidence_interval(sample, confidence_level)
        ci_lower_list.append(ci_lower)
        ci_upper_list.append(ci_upper)
    
    # Calculate mean of intervals
    mean_ci_lower = np.mean(ci_lower_list)
    mean_ci_upper = np.mean(ci_upper_list)
    results.append((n, mean_ci_lower, mean_ci_upper))

# Print results
for n, ci_lower, ci_upper in results:
    print(f"Sample size: {n}")
    print(f"95% Confidence Interval: ({ci_lower:.2f}, {ci_upper:.2f})")
    print()

# Plotting the results
sample_sizes, ci_lowers, ci_uppers = zip(*results)
plt.figure(figsize=(10, 6))
plt.plot(sample_sizes, ci_lowers, label='CI Lower Bound', marker='o')
plt.plot(sample_sizes, ci_uppers, label='CI Upper Bound', marker='o')
plt.axhline(y=mean_population, color='r', linestyle='--', label='Population Mean')
plt.xscale('log')
plt.xlabel('Sample Size')
plt.ylabel('Confidence Interval Bounds')
plt.title('95% Confidence Interval Bounds vs. Sample Size')
plt.legend()
plt.grid(True)
plt.show()
